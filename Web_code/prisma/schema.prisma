generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id             String        @id @default(uuid()) @map("_id") @db.Uuid
  email          String?       @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  favoriteIds    String[]      @db.Uuid
  role           String?       @default("USER")
  codeExpiresAt  DateTime?
  resetCode      String?
  accounts       Account[]
  listings       Listing[]
  reservations   Reservation[]
  payments       Payment[]     @relation("UserPayments")
}

model Account {
  id                String  @id @default(uuid()) @map("_id") @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id            String        @id @default(uuid()) @map("_id") @db.Uuid
  title         String
  description   String
  createdAt     DateTime      @default(now())
  category      String
  roomCount     Int
  bathroomCount Int
  guestCount    Int
  locationValue String
  price         Int
  userId        String        @map("user_id") @db.Uuid
  imageSrc      String[]
  offers        String[]
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations  Reservation[]
  payments      Payment[]     @relation("ListingPayments")
}

model Reservation {
  id         String    @id @default(uuid()) @map("_id") @db.Uuid
  listingId  String    @map("listing_id") @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  startDate  DateTime
  endDate    DateTime
  totalPrice Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  SessionId  String?   @unique @map("session_id")
  listing    Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments   Payment[] @relation("ReservationPayments")
}

model Payment {
  id            String        @id @default(uuid()) @map("_id") @db.Uuid
  reservationId String?       @map("reservation_id") @db.Uuid
  userId        String        @map("user_id") @db.Uuid
  listingId     String        @map("listing_id") @db.Uuid
  stripeSession String
  transactionId String?
  paymentMethod String?
  status        PaymentStatus @default(PENDING)
  amount        Float
  currency      String        @default("usd")
  expiresAt     DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  listing       Listing       @relation("ListingPayments", fields: [listingId], references: [id], onDelete: Cascade)
  reservation   Reservation?  @relation("ReservationPayments", fields: [reservationId], references: [id])
  user          User          @relation("UserPayments", fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  PAID
}
